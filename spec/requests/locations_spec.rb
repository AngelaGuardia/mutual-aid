 require 'rails_helper'
 require_relative '../support/devise'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/locations", type: :request do
  # Location. As you add validations to Location, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "admin user can" do
    login_admin

    context "GET /index" do
      it "renders a successful response" do
        Location.create! valid_attributes
        get locations_url
        expect(response).to be_successful
      end
    end

    context "GET /show" do
      it "renders a successful response" do
        location = Location.create! valid_attributes
        get location_url(location)
        expect(response).to be_successful
      end
    end

    context "GET /new" do
      it "renders a successful response" do
        get new_location_url
        expect(response).to be_successful
      end
    end

    context "GET /edit" do
      it "render a successful response" do
        location = Location.create! valid_attributes
        get edit_location_url(location)
        expect(response).to be_successful
      end
    end

    context "POST /create" do
      context "with valid parameters" do
        it "creates a new Location" do
          expect {
            post locations_url, params: { location: valid_attributes }
          }.to change(Location, :count).by(1)
        end

        it "redirects to the created location" do
          post locations_url, params: { location: valid_attributes }
          expect(response).to redirect_to(location_url(Location.last))
        end
      end

      context "with invalid parameters" do
        it "does not create a new Location" do
          expect {
            post locations_url, params: { location: invalid_attributes }
          }.to change(Location, :count).by(0)
        end

        it "renders a successful response (i.e. to display the 'new' template)" do
          post locations_url, params: { location: invalid_attributes }
          expect(response).to be_successful
        end
      end
    end

    context "PATCH /update" do
      context "with valid parameters" do
        let(:new_attributes) {
          skip("Add a hash of attributes valid for your model")
        }

        it "updates the requested location" do
          location = Location.create! valid_attributes
          patch location_url(location), params: { location: new_attributes }
          location.reload
          skip("Add assertions for updated state")
        end

        it "redirects to the location" do
          location = Location.create! valid_attributes
          patch location_url(location), params: { location: new_attributes }
          location.reload
          expect(response).to redirect_to(location_url(location))
        end
      end

      context "with invalid parameters" do
        it "renders a successful response (i.e. to display the 'edit' template)" do
          location = Location.create! valid_attributes
          patch location_url(location), params: { location: invalid_attributes }
          expect(response).to be_successful
        end
      end
    end

    context "DELETE /destroy" do
      it "destroys the requested location" do
        location = Location.create! valid_attributes
        expect {
          delete location_url(location)
        }.to change(Location, :count).by(-1)
      end

      it "redirects to the locations list" do
        location = Location.create! valid_attributes
        delete location_url(location)
        expect(response).to redirect_to(locations_url)
      end
    end
  end

  describe "non-admin user can" do
    login_user

    context "GET /index" do
      it "renders a successful response" do
        Location.create! valid_attributes
        get locations_url
        expect(response).to be_successful
      end
    end

    context "GET /show" do
      it "renders a successful response" do
        location = Location.create! valid_attributes
        get location_url(location)
        expect(response).to be_successful
      end
    end

    context "GET /new" do
      it "renders a successful response" do
        get new_location_url
        expect(response).to be_successful
      end
    end

    context "GET /edit" do
      it "render a successful response" do
        location = Location.create! valid_attributes
        get edit_location_url(location)
        expect(response).to be_successful
      end
    end

    context "POST /create" do
      context "with valid parameters" do
        it "creates a new Location" do
          expect {
            post locations_url, params: { location: valid_attributes }
          }.to change(Location, :count).by(1)
        end

        it "redirects to the created location" do
          post locations_url, params: { location: valid_attributes }
          expect(response).to redirect_to(location_url(Location.last))
        end
      end

      context "with invalid parameters" do
        it "does not create a new Location" do
          expect {
            post locations_url, params: { location: invalid_attributes }
          }.to change(Location, :count).by(0)
        end

        it "renders a successful response (i.e. to display the 'new' template)" do
          post locations_url, params: { location: invalid_attributes }
          expect(response).to be_successful
        end
      end
    end

    context "PATCH /update" do
      context "with valid parameters" do
        let(:new_attributes) {
          skip("Add a hash of attributes valid for your model")
        }

        it "updates the requested location" do
          location = Location.create! valid_attributes
          patch location_url(location), params: { location: new_attributes }
          location.reload
          skip("Add assertions for updated state")
        end

        it "redirects to the location" do
          location = Location.create! valid_attributes
          patch location_url(location), params: { location: new_attributes }
          location.reload
          expect(response).to redirect_to(location_url(location))
        end
      end

      context "with invalid parameters" do
        it "renders a successful response (i.e. to display the 'edit' template)" do
          location = Location.create! valid_attributes
          patch location_url(location), params: { location: invalid_attributes }
          expect(response).to be_successful
        end
      end
    end

    context "DELETE /destroy" do
      it "destroys the requested location" do
        location = Location.create! valid_attributes
        expect {
          delete location_url(location)
        }.to change(Location, :count).by(-1)
      end

      it "redirects to the locations list" do
        location = Location.create! valid_attributes
        delete location_url(location)
        expect(response).to redirect_to(locations_url)
      end
    end
  end

  describe "not authenticated user can" do

    context "GET /index" do
      it "renders a successful response" do
        Location.create! valid_attributes
        get locations_url
        expect(response).to_not be_successful
      end
    end

    context "GET /show" do
      it "renders a successful response" do
        location = Location.create! valid_attributes
        get location_url(location)
        expect(response).to_not be_successful
      end
    end

    context "GET /new" do
      it "renders a successful response" do
        get new_location_url
        expect(response).to_not be_successful
      end
    end

    context "GET /edit" do
      it "render a successful response" do
        location = Location.create! valid_attributes
        get edit_location_url(location)
        expect(response).to_not be_successful
      end
    end

    context "POST /create" do
      context "with valid parameters" do
        it "creates a new Location" do
          expect {
            post locations_url, params: { location: valid_attributes }
          }.to change(Location, :count).by(1)
        end

        it "redirects to the created location" do
          post locations_url, params: { location: valid_attributes }
          expect(response).to redirect_to(location_url(Location.last))
        end
      end

      context "with invalid parameters" do
        it "does not create a new Location" do
          expect {
            post locations_url, params: { location: invalid_attributes }
          }.to change(Location, :count).by(0)
        end

        it "renders a successful response (i.e. to display the 'new' template)" do
          post locations_url, params: { location: invalid_attributes }
          expect(response).to be_successful
        end
      end
    end

    context "PATCH /update" do
      context "with valid parameters" do
        let(:new_attributes) {
          skip("Add a hash of attributes valid for your model")
        }

        it "updates the requested location" do
          location = Location.create! valid_attributes
          patch location_url(location), params: { location: new_attributes }
          location.reload
          skip("Add assertions for updated state")
        end

        it "redirects to the location" do
          location = Location.create! valid_attributes
          patch location_url(location), params: { location: new_attributes }
          location.reload
          expect(response).to redirect_to(location_url(location))
        end
      end

      context "with invalid parameters" do
        it "renders a successful response (i.e. to display the 'edit' template)" do
          location = Location.create! valid_attributes
          patch location_url(location), params: { location: invalid_attributes }
          expect(response).to be_successful
        end
      end
    end

    context "DELETE /destroy" do
      it "destroys the requested location" do
        location = Location.create! valid_attributes
        expect {
          delete location_url(location)
        }.to change(Location, :count).by(-1)
      end

      it "redirects to the locations list" do
        location = Location.create! valid_attributes
        delete location_url(location)
        expect(response).to redirect_to(locations_url)
      end
    end
  end
end
